What happens when you initialize a repository? Why do you need to do it?

When I initialize a repository, the new .git directory created in the folder, and an empty git repository created.
There's no commits during the creation of repository.
To create a new repository, I need to call a command git init in a directory, which I wish to track.

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is something intermediate between working directory and repository.
In this area one can add files to be in the next commit.
Also, if one has changes his mind, he can remove the files from it.
However, those operations won't affect contents of repository and working directory.
It offers the value of logical structuring every commit.
A programmer is able to commit only desirable files, not the whole pile of them.

How can you use the staging area to make sure you have one commit per logical change?

By calling command git diff --staged I am able to compare file within the staging area and in the latest commit.
So, it'll show me whether now I have multiple logical changes to be commited or not.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If I want to make an experimental change or add feature that is not completely yet, I can commit those changes in a branch.
So, the master branch would contain official version, and all experiments will be available as well.

How do the diagrams help you visualize the branch structure?

These diagrams can point out that I can make an unreachable commit.
Also, I am able to see the structure and interrelations among branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When two branches merged, the new repository is created which contain:
- all lines that was in the repository from which two branches separated;
- all lines that present in one of branch and not in the ancestor repository;
- no lines that were in the ancestor and not in one of the merging repositories.
We represent in the diagrams in such way, so we can clearly see the history of merging repositories.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's automatic merging:
+ it allows easily incorporate some low coupled changes
- it is not able to make merging even when there is a little intersection
Merging manually:
+ you can easily incorporate tiny changes together even if they are higly coupled
- it is tediuos when merging is big
